from datetime import datetime
from decimal import Decimal

from repositories.tuition_repo import tuitionRepository
from repositories.account_repo import AccountRepository


class PaymentService:
    def __init__(self, tuition_repo: tuitionRepository, account_repo: AccountRepository):
        self.tuition_repo = tuition_repo
        self.account_repo = account_repo

    def confirm_payment(self, transaction_id: str, customer_id: int, otp_code: str):
        now = datetime.utcnow()

        with self.tuition_repo.db.begin():
            tuition = self.tuition_repo.lock_tuition_by_transaction(transaction_id)
            if not tuition:
                return {"message": "Cannot find tuition information for this transaction"}, 400

            if tuition["is_paid"]:
                return {"message": "This tuition has already been completed"}, 400

            otp_record = self.tuition_repo.get_latest_otp(transaction_id)
            if not otp_record:
                self.tuition_repo.insert_otp_audit(
                    transaction_id,
                    customer_id,
                    None,
                    "FAILED",
                    "OTP has not been generated for this transaction",
                )
                return {"message": "OTP has not been generated for this transaction"}, 400

            if otp_record["verified_at"] is not None:
                self.tuition_repo.insert_otp_audit(
                    transaction_id,
                    customer_id,
                    None,
                    "FAILED",
                    "OTP has already been used",
                )
                return {"message": "This OTP was already used"}, 400

            if otp_record["expires_at"] < now:
                self.tuition_repo.insert_otp_audit(
                    transaction_id,
                    customer_id,
                    None,
                    "FAILED",
                    "OTP has expired",
                )
                return {"message": "OTP has expired"}, 400

            if otp_record["otp_code"] != otp_code:
                self.tuition_repo.insert_otp_audit(
                    transaction_id,
                    customer_id,
                    None,
                    "FAILED",
                    "Invalid OTP code",
                )
                return {"message": "Invalid OTP"}, 400

            if (
                otp_record.get("requested_by") is not None
                and otp_record["requested_by"] != customer_id
            ):
                self.tuition_repo.insert_otp_audit(
                    transaction_id,
                    customer_id,
                    None,
                    "REJECTED",
                    "OTP was generated by another account",
                )
                return {
                    "message": "OTP được tạo bởi tài khoản khác. Vui lòng yêu cầu mã OTP mới."
                }, 409

            customer = self.account_repo.lock_customer_for_update(customer_id)
            if not customer:
                return {"message": "Cannot find customer information"}, 400

            tuition_amount = Decimal(tuition["tuition"])
            current_balance = Decimal(customer["balance"])

            if current_balance < tuition_amount:
                return {"message": "Balance is not enough to cover this tuition"}, 400

            new_balance = current_balance - tuition_amount

            self.account_repo.update_customer_balance(customer_id, new_balance)
            self.tuition_repo.mark_tuition_paid(transaction_id, now)
            self.tuition_repo.insert_history_entry(
                transaction_id=transaction_id,
                student_id=tuition["studentId"],
                tuition_amount=tuition_amount,
                completed_at=now,
                payer_name=customer["fullName"],
                email=customer["email"],
                customer_id=customer_id,
            )
            self.tuition_repo.mark_otp_verified(otp_record["id"], now)
            self.tuition_repo.insert_otp_audit(
                transaction_id,
                customer_id,
                customer["email"],
                "CONFIRMED",
                "Payment completed successfully",
            )

        return {
            "transaction_id": transaction_id,
            "studentId": tuition["studentId"],
            "paid_at": now.isoformat(),
            "tuition": float(tuition_amount),
            "balance_after": float(new_balance),
            "message": "Tuition payment completed successfully",
        }, 200

    def get_history(self, customer_id: int, limit: int | None = None):
        records = self.tuition_repo.get_payment_history_for_customer(customer_id, limit)
        return [
            {
                "transaction_id": item["transaction_id"],
                "student_id": item["student_id"],
                "student_name": item["student_name"],
                "tuition": float(item["tuition"]),
                "paid_at": item["paid_at"].isoformat() if item["paid_at"] else None,
                "payer": item["payer"],
                "email": item["email"],
                "status": item["status"],
            }
            for item in records
        ]
